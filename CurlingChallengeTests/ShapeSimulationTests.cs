using CurlingChallenge.Domain.Curling;

namespace CurlingChallengeTests
{
    public class SimulationTests
    {
        [Theory]
        [InlineData(2, new int[] { 5, 5, 6, 8, 3, 12 }, new double[] { 2, 6, 9.872983346207416, 13.33708496134517, 12.518734657272006, 13.33708496134517 })]
        [InlineData(895, new int[] { 464, 393, 895, 946, 554, 210, 885, 28, 212, 631, 558, 813, 732 }, new double[] { 895, 2683.5913451652395, 4401.757809743105, 6191.031125924845, 7937.580867558332, 9694.215149359756, 11352.067675973627, 12923.58000491031, 14704.097907094954, 16444.367713762873, 18232.878546830427, 20004.622038422818, 21792.788417706357 })]
        [InlineData(14, new int[] { 374, 377, 162, 152, 930, 499 }, new double[] { 14, 41.83882181415011, 14, 40.15339366124404, 14, 14 })]
        [InlineData(556, new int[] { 279, 412, 561, 191, 939, 290, 985, 880, 27, 837, 296, 181, 16, 14 }, new double[] { 556, 1660.017662902184, 2761.989985603621, 3810.6291036990697, 4633.4535078096915, 5536.41696221967, 6404.471683997047, 7511.50330052839, 8224.900104558237, 8986.768859659796, 9958.294978711672, 11064.33250067917, 12164.02291165855, 13276.021113095945 })]
        [InlineData(555, new int[] { 962, 240, 85, 799, 29, 274 }, new double[] { 555, 1398.0990451898283, 2497.223696901362, 3347.1083949633994, 4146.608238615667, 5229.232365448244 })]
        [InlineData(117, new int[] { 788, 479, 574, 927, 574, 523, 838, 637, 202 }, new double[] { 117, 117, 330.84807691443007, 305.24186569411177, 564.8480769144301, 793.2227690324492, 521.6558208818492, 997.5754054235659, 117 })]
        [InlineData(926, new int[] { 813, 86, 676, 89, 200, 888 }, new double[] { 926, 2629.3423026508794, 4384.849067092418, 6141.361236136516, 7990.031839570237, 9709.496872654656 })]
        [InlineData(411, new int[] { 370, 932, 683, 204, 766, 143, 248, 194, 691 }, new double[] { 411, 1010.8666518485587, 1794.2458703628106, 2462.260091768313, 3062.126743616872, 3598.368293666847, 4413.634507857034, 5233.858867407517, 5888.591637322083 })]
        [InlineData(938, new int[] { 508, 515, 427, 330, 505, 46, 799, 609, 707 }, new double[] { 938, 2813.98694025305, 4687.921837734817, 6561.412430185177, 8429.23228231225, 10248.214140385608, 11966.459466292243, 13832.813130526329, 15706.25168035923 })]
        [InlineData(302, new int[] { 981, 109, 96, 867, 600, 343, 843, 974, 539, 570, 287, 617, 685 }, new double[] { 302, 302, 905.8600831318461, 895.1441646008161, 1436.9254857996925, 1983.5213145433813, 2322.366411896139, 2911.989172650844, 3331.024970644285, 3934.228916254723, 4467.827079669853, 4973.708488697701, 5573.8684673700545 })]
        [InlineData(147, new int[] { 886, 324, 920, 502, 457, 419, 381, 54, 872, 830, 403, 673 }, new double[] { 147, 147, 439.0273959751037, 380.99145283535466, 671.5271649259685, 963.061039458586, 1254.5949139912036, 263.3443165779919, 729.0825631416274, 1020.0670988131988, 1547.7706292201428, 1664.1149457981346 })]
        [InlineData(552, new int[] { 458, 413, 723, 503, 794, 745, 674 }, new double[] { 552, 1655.0824991812715, 2714.665436001226, 3796.523097618502, 4861.480843259145, 5964.392897776639, 7066.1074706129975 })]
        [InlineData(898, new int[] { 638, 317, 185, 777, 503, 950, 561, 255, 686, 345, 984, 47, 772 }, new double[] { 898, 2665.08092627361, 4456.223578325646, 6151.850895869215, 7926.826952045748, 9666.311645855958, 11419.678407260999, 13189.418501173097, 14932.936496491757, 16696.267151814234, 18374.747118927335, 19906.95043441781, 21550.11536831824 })]
        [InlineData(89, new int[] { 373, 994, 41, 344, 924, 882, 878, 758, 681, 261 }, new double[] { 89, 89, 89, 264.6217526390168, 252.65818036383027, 425.6321668473475, 603.5872173516814, 735.0558447880397, 895.5394888144638, 422.0860343031453 })]
        public void CircleCurlingSimulate(int size, int[] inputs, double[] outputs)
        {
            //Setup
            var curling = new CircleCurling();

            //Execute
            curling.Simulate(size, inputs);

            //Tests
            Assert.True(curling.Shapes.Select(shape => shape.Y).SequenceEqual(outputs));
        }

        [Theory]
        [InlineData(327, new int[] { 932, 351, 633, 722, 421, 885, 195, 733, 789, 654, 224, 700 }, new double[] { 163.5, 163.5, 490.5, 817.5, 1144.5, 1144.5, 1471.5, 1471.5, 1798.5, 2125.5, 1798.5, 2452.5 })]
        [InlineData(169, new int[] { 261, 7, 322, 770, 350, 747, 746, 41, 412, 966, 528, 25 }, new double[] { 84.5, 84.5, 253.5, 84.5, 422.5, 253.5, 422.5, 253.5, 591.5, 84.5, 760.5, 422.5 })]
        [InlineData(613, new int[] { 206, 71, 487, 142, 233, 345, 701, 860, 293 }, new double[] { 306.5, 919.5, 1532.5, 2145.5, 2758.5, 3371.5, 3984.5, 4597.5, 5210.5 })]
        [InlineData(406, new int[] { 800, 275, 164, 17, 73, 772, 65, 171 }, new double[] { 203, 203, 609, 1015, 1421, 609, 1827, 2233 })]
        [InlineData(902, new int[] { 122, 166, 381, 669, 430, 575, 414, 992, 987, 97, 371, 290 }, new double[] { 451, 1353, 2255, 3157, 4059, 4961, 5863, 6765, 7667, 8569, 9471, 10373 })]
        [InlineData(368, new int[] { 775, 669, 681, 524, 352, 76, 71, 58 }, new double[] { 184, 552, 920, 1288, 1656, 2024, 2392, 2760 })]
        [InlineData(554, new int[] { 198, 698, 595, 509, 639, 437, 33, 574, 986, 303, 147, 380, 114 }, new double[] { 277, 831, 1385, 1939, 2493, 3047, 3601, 4155, 4709, 4709, 5263, 5817, 6371 })]
        [InlineData(715, new int[] { 863, 118, 423, 242, 240, 731, 11, 311 }, new double[] { 357.5, 357.5, 1072.5, 1787.5, 2502.5, 3217.5, 3217.5, 3932.5 })]
        [InlineData(867, new int[] { 286, 329, 498, 591, 357, 399, 374, 210, 100, 964, 672, 733, 993 }, new double[] { 433.5, 1300.5, 2167.5, 3034.5, 3901.5, 4768.5, 5635.5, 6502.5, 7369.5, 8236.5, 9103.5, 9970.5, 10837.5 })]
        [InlineData(958, new int[] { 684, 652, 213, 870, 554, 537, 805, 713, 824, 209, 468, 180, 229 }, new double[] { 479, 1437, 2395, 3353, 4311, 5269, 6227, 7185, 8143, 9101, 10059, 11017, 11975 })]
        [InlineData(367, new int[] { 470, 852, 419, 145, 103, 680, 882, 943 }, new double[] { 183.5, 183.5, 550.5, 917.5, 1284.5, 917.5, 1284.5, 1651.5 })]
        [InlineData(471, new int[] { 218, 524, 707, 141, 419, 22, 491, 290, 522, 178, 792, 732, 47 }, new double[] { 235.5, 706.5, 1177.5, 1177.5, 1648.5, 2119.5, 2590.5, 3061.5, 3532.5, 4003.5, 4003.5, 4474.5, 4474.5 })]
        [InlineData(878, new int[] { 602, 137, 823, 522, 715, 510, 154, 506 }, new double[] { 439, 1317, 2195, 3073, 3951, 4829, 5707, 6585 })]
        [InlineData(806, new int[] { 867, 148, 598, 124, 637, 911, 18, 76, 11, 77, 669, 715, 135, 360 }, new double[] { 403, 1209, 2015, 2821, 3627, 4433, 4433, 5239, 6045, 6851, 7657, 8463, 9269, 10075 })]
        [InlineData(677, new int[] { 90, 32, 842, 844, 770, 735, 940, 940, 69, 462, 787 }, new double[] { 338.5, 1015.5, 338.5, 1015.5, 1692.5, 2369.5, 3046.5, 3723.5, 3046.5, 4400.5, 5077.5 })]
        public void SquareCurlingSimulate(int size, int[] inputs, double[] outputs)
        {
            //Setup
            var curling = new SquareCurling();

            //Execute
            curling.Simulate(size, inputs);

            //Tests
            Assert.True(curling.Shapes.Select(shape => shape.Y).SequenceEqual(outputs));
        }

        [Theory]
        [InlineData(245, new int[] { 917, 979, 780, 277, 550, 427, 870, 218, 457, 359, 603 }, new double[] { 70.72540797572915, 282.9016319029166, 362.57596905108494, 70.72540797572915, 388.5567311646181, 599.8669296880212, 574.7521929782724, 662.2207587605008, 812.0431536152087, 1024.2193775423962, 1025.951428349965 })]
        [InlineData(523, new int[] { 479, 916, 872, 758, 384, 616, 958, 615, 501, 328, 164, 930, 823 }, new double[] { 150.97709539308715, 299.9334648440106, 752.864751023272, 1205.7960372025334, 1463.8716075302962, 1916.8028937095576, 2230.3040898795243, 2542.0732352419222, 2995.0045214211837, 3447.935807600445, 3900.8670937797065, 3157.817297332658, 3610.7485835119196 })]
        [InlineData(906, new int[] { 835, 842, 478, 338, 984, 157, 365, 371, 16, 265 }, new double[] { 261.5396719429005, 1046.1586877716018, 1830.777703600303, 2615.3967194290044, 3065.7299293969127, 3400.0157352577057, 4184.634751086407, 4969.253766915108, 5753.872782743809, 6538.49179857251 })]
        [InlineData(951, new int[] { 544, 136, 292, 355, 614, 203, 349, 153, 663, 649 }, new double[] { 274.5300529996671, 1098.1202119986683, 1921.7103709976695, 2745.300529996671, 3568.890688995672, 4392.480847994673, 5216.071006993674, 6039.661165992675, 6803.49557213055, 7627.08573112955 })]
        [InlineData(172, new int[] { 719, 502, 783, 190, 424, 788, 48, 678, 490, 941, 736 }, new double[] { 49.652123150307816, 49.652123150307816, 198.60849260123126, 49.652123150307816, 198.60849260123126, 347.5648620521547, 101.61364737737412, 454.95201212142507, 347.5648620521547, 380.4738273959634, 603.9083815723485 })]
        [InlineData(815, new int[] { 295, 590, 995, 701, 393, 115, 679, 934 }, new double[] { 235.2702346947725, 941.0809387790899, 1646.8916428634075, 2352.702346947725, 3058.5130510320423, 3764.3237551163597, 4199.068507816148, 4904.879211900465 })]
        [InlineData(78, new int[] { 185, 335, 538, 473, 224, 710, 760, 324, 310, 754, 131, 342, 574, 215 }, new double[] { 22.516660498395407, 22.516660498395407, 22.516660498395407, 45.033320996790806, 90.06664199358163, 22.516660498395407, 71.01408311032397, 90.06664199358163, 157.61662348876786, 138.56406460551017, 64.08587988004847, 225.16660498395407, 90.06664199358163, 157.61662348876786 })]
        [InlineData(871, new int[] { 10, 395, 836, 507, 403, 166, 297, 786, 826, 867, 865, 671 }, new double[] { 251.43604223208203, 1005.7441689283281, 1750.5260161829453, 2504.8341428791914, 3259.1422695754372, 4013.4503962716835, 4767.75852296793, 5429.401931459241, 6183.710058155487, 6938.018184851733, 7692.3263115479795, 8446.634438244226 })]
        [InlineData(670, new int[] { 663, 109, 801, 556, 148, 359, 514, 650, 143, 446, 937, 133, 56 }, new double[] { 193.41234017852463, 394.3302338565144, 773.6493607140985, 1353.8863812496725, 1807.6836928327184, 2387.920713368292, 2968.157733903866, 3548.3947544394396, 3830.7190360731665, 4410.95605660874, 4720.99315116357, 4991.193077144314, 5571.430097679888 })]
        [InlineData(502, new int[] { 160, 843, 666, 152, 520, 234 }, new double[] { 144.91491756659607, 144.91491756659607, 579.6596702663843, 579.6596702663843, 1014.4044229661724, 1388.52739740105 })]
        [InlineData(750, new int[] { 874, 27, 794, 281, 140, 559, 642, 995, 589, 202, 277, 573, 817 }, new double[] { 216.50635094610968, 216.50635094610968, 866.0254037844387, 1276.5214451782626, 1926.0404980165918, 2499.34931532189, 3148.8683681602192, 3798.3874209985484, 4394.212898802242, 5022.947341949744, 5672.466394788074, 6321.985447626403, 6971.504500464732 })]
        [InlineData(879, new int[] { 709, 84, 180, 69, 82, 527 }, new double[] { 253.74544330884055, 693.6863484313353, 1454.922678357857, 2216.1590082843786, 2977.3953382109003, 3729.105388695793 })]
        [InlineData(880, new int[] { 565, 622, 217, 617, 804, 434, 628 }, new double[] { 254.03411844343535, 1016.1364737737413, 1778.2388291040472, 2540.341184434353, 3302.4435397646594, 4064.545895094965, 4826.648250425271 })]
        [InlineData(821, new int[] { 392, 813, 216, 412, 922, 400, 130, 667, 5, 49, 571 }, new double[] { 237.00228550234138, 929.8226085298922, 1317.8019894253207, 2028.8088459323449, 2567.4766470862655, 3085.3598385493597, 3796.366695056384, 4288.269124405945, 4563.665202809397, 5274.672059316421, 5792.5552507795155 })]
        [InlineData(361, new int[] { 676, 70, 265, 720, 726, 580, 149, 166, 443, 954, 754, 184, 880 }, new double[] { 104.21172358872745, 104.21172358872745, 391.73215764516107, 416.8468943549098, 729.4820651210921, 1042.1172358872745, 704.3673284113434, 1017.0024991775257, 1354.752406653457, 959.8448225277527, 1441.3549470319008, 1531.4215890254825, 1753.9901177980832 })]
        public void TriangleCircleSimulate(int size, int[] inputs, double[] outputs)
        {
            //Setup
            var curling = new TriangleCurling();

            //Execute
            curling.Simulate(size, inputs);

            //Tests
            Assert.True(curling.Shapes.Select(shape => shape.Y).SequenceEqual(outputs));
        }
    }
}
